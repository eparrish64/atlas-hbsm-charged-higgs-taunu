#! /usr/bin/env python

"""
* small script for checking physics objects cutflow efficiency
* by looking at the cutflow histograms.  
"""

## stdlib
import os, sys
from tabulate import tabulate
from argparse import ArgumentParser
from collections import OrderedDict

## local
from hpana import log

## setup parser before loading ROOT 
parser = ArgumentParser()
parser.add_argument("ifiles", nargs="+", help="input sample")
parser.add_argument("--cfile", help="cutflow file",)
parser.add_argument("--plots", help="produce plots", action="store_true")
parser.add_argument("--latex", help="LaTeX tables", action="store_true")
parser.add_argument("--normalize", help="normalize plots", action="store_true")
parser.add_argument("--overlay", help="overlay plots", action="store_true")

args = parser.parse_args()

## ROOT
import ROOT
ROOT.SetSignalPolicy(ROOT.kSignalFast)
ROOT.gROOT.SetBatch(True)
log.info("ROOT is in batch mode")


##------------------------------------------------------------------------
## consts
##------------------------------------------------------------------------
CF_HISTS_KEYS = ["cutflow_muon_NOMINAL", "cutflow_ele_NOMINAL", "cutflow_tau_NOMINAL", "cutflow_jet_NOMINAL"]


##------------------------------------------------------------------------
## yields table
##------------------------------------------------------------------------
def cutflow_table(ifiles, cfkeys=[], latex=True):
    """Given a list of ntuples, calculate the efficiency drop per cut. 
    """
    table = OrderedDict()
    for fn in ifiles:
        tfile = ROOT.TFile(fn, "READ")
        fkey = fn.split("/")[-1].replace(".root", "")
        table[fkey] = {}
        for k in cfkeys:
            table[fkey][k] = OrderedDict()
            hk = tfile.Get(k)
            if not hk:
                log.warning("cant find %s in %s"%(k, fn))
                continue
            for bn in range(1, hk.GetNbinsX()+1):
                lbin = hk.GetBinContent(bn-1)
                hbin = hk.GetBinContent(bn)
                bin_one = hk.GetBinContent(1)
                bin_label = hk.GetXaxis().GetBinLabel(bn)
                if lbin==0:
                    if bn==1:
                        row = (bin_label, hbin)
                    else:
                        row = (bin_label, 0)
                else:
                    row = (bin_label, "%i (%.2f%%)"%( hbin, (1 - ((lbin-hbin)/lbin) )*100.))
                table[fkey][k][row[0]] = row[1]
            ## overal reduction
            table[fkey][k]["overall"] = "%.2f%%"%(100* (1 - (hk.GetBinContent(1) - hk.GetBinContent(hk.GetNbinsX()))/(hk.GetBinContent(1) ) ) )

    cfile = open(args.cfile, "a")
    tfkeys = sorted(table.keys())

    doc_head = "\documentclass{article} \n \usepackage{adjustbox}\n"
    doc_bgn = r"\begin{document}"
    doc_end = r"\end{document}"
    if latex:
        cfile.write("%s \n %s \n"%(doc_head, doc_bgn))
    for cf in cfkeys:
        new_rows = []
        cf_labels = table[tfkeys[0]][cf].keys()
        for cl in cf_labels:
            row = [cl]
            for tk in tfkeys:
                row.append(table[tk][cf][cl])
            new_rows.append(row)
            
        ptable = tabulate(new_rows, headers=[cf]+tfkeys, tablefmt='latex' if latex else 'txt')
        if latex:
            adj_box_bgn = r"\begin{table}[ht] \centering \begin{adjustbox}{width=1\textwidth}"
            adj_box_end = r"\end{adjustbox} \end{table}"
            ostring = "{0}\n {1} \n {2} \n {3} \n \n ".format("*"*50, adj_box_bgn, ptable, adj_box_end)
        else:
            ostring = "{0}\n {1} \n {2} \n ".format(cf.replace("_", " "), "*"*50, ptable)
        cfile.write(ostring)
    if latex:
        cfile.write("\n %s"%doc_end)
        
    return table 
            
##------------------------------------------------------------------------
## cutflow plots 
##------------------------------------------------------------------------
def plot_cutflows(ifiles, cfkeys=[],overlay=False, normalize=False):
    """ Retrieve cut flows from some tfiles and plot them. 
    """
    colors = [ROOT.kBlue, ROOT.kRed, ROOT.kBlack, ROOT.kMagenta, ROOT.kOrange, ROOT.kGreen, ROOT.kViolet]

    cf_hists = {}
    for ckey in cfkeys:
        canvas = ROOT.TCanvas()
        cf_legend = ROOT.TLegend(0.6, 0.8, 0.9, 0.9)
        cf_hists[ckey] = {}
        for n, fn in enumerate(ifiles):
            tf = ROOT.TFile(fn)
            fkey = fn.split("/")[-1].replace(".root", "")
            cf_hist = tf.Get(ckey)
            cf_hist.SetDirectory(0)
            cf_hists[ckey][fkey] = cf_hist
            if normalize:
                cf_hist.Scale(1/cf_hist.Integral())
                cf_hist.SetMaximum(1)
            cf_hist.SetLineColor(colors[n])
            cf_hist.SetTitle(ckey)
            cf_legend.AddEntry(cf_hist, fkey, "L")
            if not overlay or len(ifiles)==1:
                cf_hist.Draw("HIST")
                cf_legend.Draw("SAME")
                oname = "%s_%s.png"%(ckey, fkey)
                if normalize:
                    oname = oname.replace(".png", "_norm.png")
                canvas.SetLogy()
                canvas.Print(oname)
            else:
                cf_hist.Draw("SAME HIST")
            tf.Close()
            
        if overlay:    
            cf_legend.Draw("SAME")
            oname = "%s.png"%ckey
            if normalize:
                oname = oname.replace(".png", "_norm.png")
            if not normalize:    
                canvas.SetLogy()
            canvas.Print("%s"%oname)
    return cf_hists

##------------------------------------------------------------------------
## main driver
##------------------------------------------------------------------------
if __name__=="__main__":
    if args.cfile:
        cutflow_table(args.ifiles, cfkeys=CF_HISTS_KEYS, latex=args.latex)
    if args.plots:
        plot_cutflows(args.ifiles, cfkeys=CF_HISTS_KEYS, normalize=args.normalize, overlay=args.overlay)
        
        
