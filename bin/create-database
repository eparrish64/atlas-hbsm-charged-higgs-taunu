#!/usr/bin/env python
"""
Update the datasets database
"""
from argparse import ArgumentParser
import yaml

##-----------------------------------------------------------------------
## setup cmd args
parser = ArgumentParser()
parser.add_argument('--year', "-y",default="2018", choices=("2016", "2017", "2018"))
parser.add_argument('--deep', action='store_true', default=False)
parser.add_argument('--reset', action='store_true', default=False)
parser.add_argument('--versioned', action='store_true', default=False)
parser.add_argument('--validate', action='store_true', default=False)
parser.add_argument('--validate-pattern', default=None)
parser.add_argument('--validate-type', type=int, default=None, choices=[0, 1])
parser.add_argument('--validate-year', type=int, default=None)
parser.add_argument('--info', action='store_true', default=False)
parser.add_argument('--name', default='DB')
parser.add_argument('--config', default='hpana/db/datasets_config.yml')
parser.add_argument('-v', '--verbose', action='store_true', default=False)
parser.add_argument('--version', type=str)
parser.add_argument('--log', default="INFO", choices=("DEBUG", "INFO", "WARNING", "ERROR"))
parser.add_argument('channel', choices=("taujet", "taulep"))
args = parser.parse_args()

## ROOT stuff after cmd setup 
from hpana.db.datasets import Database
from hpana import log

# - - - - - - - - create a database 
db = Database(name="%s_%s%s"%(args.name, args.channel, args.version),
              verbose=args.verbose, log_level=args.log)

# - - - - - - - - validate the database 
if args.validate:
    try:
        import pyAMI
    except ImportError:
        raise RuntimeError("pyAMI is not found; make sure you do <lsetup pyAMI> first")
    if db:
        db.validate(pattern=args.validate_pattern,
                    datatype=args.validate_type,
                    year=args.validate_year)
    else:
        log.error("Can't validate database as it's empty! update it first and then rerun the validation")
# - - - - - - - - just print db 
elif args.info:
    print "%i datasets in database" % len(db)
    for name in sorted(db.keys()):
        if len(db[name].files) == 0:
            print "EMPTY DATASET"
            sys.exit(1)

# - - - - - - - - updated the datebase                     
else:
    if args.reset:
        db.clear()
    with open(args.config) as config:
        config_dict = yaml.load(config)
        year_config = config_dict[args.year]
        if args.channel not in year_config:
            raise RuntimeError("no config found for %s"%args.channel)
        
    # - - - - pass the configs to the db
    params = {}
    params['data_grl'] = year_config['common'].get('grl', None)
    params.update(year_config[args.channel])
    db.scan(args.year,
            deep=args.deep,
            versioned=args.versioned,
            **params)
    db.write()
    
