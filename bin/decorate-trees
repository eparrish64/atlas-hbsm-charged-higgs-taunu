#!/usr/bin/env python2.7

import sys, os, re, gc, glob, argparse
import shutil, array 
from multiprocessing import Process    

 
##-------------------------------------------------------------------------------------
## setup cmd args
parser = argparse.ArgumentParser()
parser.add_argument('action', choices=['rm', 'ab', 'at', 'skim', "mtf", "zip"],
                    help='remove branches, add branches, add trees, skim trees or compress trees', )
parser.add_argument('--files', nargs='+', 
                    help='ntuples to be decorated')
parser.add_argument('--outdir', "-od", type=str, 
                    help='if you wish to move the decorated files to a new direcctory, keeping the same structure as the input dir')
parser.add_argument("--suffix", type=str, default="skim",
                    help="suffix for the proccesed files if you want to copy them")
parser.add_argument("--update-in-place", "-uip", action="store_true",
                    help="update the file in place")
parser.add_argument('--sys', action='store_true',
                    help='include sys trees or not')
parser.add_argument('--log', '-l', default='INFO', 
                    help='logging level')
args = parser.parse_args() 


# ROOT stuff after cmd setup
import ROOT
ROOT.gROOT.SetBatch(True)
# ROOT.gROOT.Macro( '$ROOTCOREDIR/scripts/load_packages.C' )
# if(not ROOT.xAOD.Init().isSuccess()): print "Failed xAOD.Init()"

from hpana import log
from hpana.cluster.parallel import run_pool

##-------------------------------------------------------------------------------------
## consts

# - - - - - - - - branches to be added to the trees
ADD_BRANCHES = [ #<! branch name:= tformula
    #"tau_0_jet_width:=-111",
    ]

# - - - - - - - - branches to be removed from the trees
RM_BRANCHES = []

# - - - - - - - - systematics trees to be added to the trees
SYSTEMATICS= [] #<! (systematic tree name, brnach name, tformula)


# - - - - - - - - cumulative filters 
SELECTIONS = [
    "tau_0_jet_bdt_score_trans:=tau_0_jet_bdt_score_trans > 0.01",
]

##-------------------------------------------------------------------------------------
## 
def get_trees(tfile):
    """
    Retrun a list of TTrees in a given root file.
    """
    trees = set()
    trees.add(tfile.Get('NOMINAL'))
    if args.sys:
        keys = [k.GetName() for k in tfile.GetListOfKeys()]
        keys = filter(lambda k: isinstance(tfile.Get(k), ROOT.TTree), keys)
        for k in keys:
            if k=='EventLoop_FileExecuted' or 'upsilon' in k:
                continue
            trees.add(tfile.Get(k))

    return trees

##-------------------------------------------------------------------------------------
## 
def setup_branches(tree, branches):
    """setup output branches.
    """
    out_branches = dict()
    for branch in branches:
        if ':=' in branch:
            fname, tform = branch.split(':=')
            tform.strip()
            fname.strip()
            branch = branch.split(':=')[0]
        else:
            fname, tform = branch, branch
        
        # if  branch is already in tree do nothing.
        if branch in [b.GetName() for b in tree.GetListOfBranches()]:
            log.warning("%s is already in %s "%(branch, tree.GetName()))
            continue
        branch_val = array.array('f', [0.])
        tbranch = tree.Branch(fname, branch_val, fname+"/F")
            
        # setup branch tfomula
        tform = ROOT.TTreeFormula(fname, tform, tree)
        tform.SetQuickLoad(True)
        out_branches[branch] = (branch_val, tform, tbranch)

    return out_branches

##-------------------------------------------------------------------------------------
## 
def setup_tformulas(tree, tformuals):
    # Setup a TTreeFormula for each feature
    forms = []
    for tform in tformuals[:]:
        name, tform = tform.split(":=")
        form = ROOT.TTreeFormula(name, tform, tree)
        form.SetQuickLoad(True)
        forms.append(form)
        
    return forms

##-------------------------------------------------------------------------------------
## 
def remove_branches(file_name, branches=RM_BRANCHES, **kwargs):
    """
    Remove the given list of branches from tree
    """
    tfile = ROOT.TFile.Open(file_name, "UPDATE")
    trees = get_trees(tfile)
    for tree in trees:
        for br in branches:
            tree.SetBranchStatus(br, 0)
        # copy_tree = tree.Clone()    
        # # now over-write tree with active branches only
        # entries = tree.GetEntries()
        # for it, entry in enumerate(tree):
        #     copy_tree.LoadTree(it)
        #     # Overwrite a branch value. This changes the value that will be written to
        #     # the new tree but leaves the value unchanged in the original tree on disk.
        #     # "entry" is actually the buffer, which is shared between both trees.
        #     copy_tree.Fill()
        tree.Write(tree.GetName(), ROOT.TObject.kOverwrite)
    tfile.Close()     

    return 

##-------------------------------------------------------------------------------------
## 
def add_branches(file_name, 
                 branches=ADD_BRANCHES,
                 **kwargs):
    
    tfile = ROOT.TFile.Open(file_name, "UPDATE")
    trees = get_trees(tfile)
    for tree in trees:
        print tree.GetName()
        # add corrected upsilon branches
        tbranches = setup_branches(tree, branches)
        nEntries = tree.GetEntries()

        # Loop over events in tree
        tree_name = tree.GetName()
        tree.SetCacheSize(32*2**20)
        tree.SetCacheLearnEntries()
        totalEntries = tree.GetEntries()
        blockSize = 2**16
        blocks = totalEntries/blockSize
        for _, tbranch in tbranches.iteritems():
            log.info('adding %s branch to %s tree'%(tbranch[2].GetName(), tree_name))
            tval, tform, tb = tbranch 
            for block in xrange(blocks+1):
                for entry in xrange(block*blockSize,
                                    min(totalEntries, (block+1)*blockSize)):
                    if (entry%10000==0):
                        log.info("Tree: {0}, Event: {1}/{2}".format(tree_name, entry+1, totalEntries))
                    tree.LoadTree(entry)
                    tval[0] = (tform.EvalInstance())
                    tb.Fill()

        tree.Write(tree.GetName(), ROOT.TObject.kOverwrite)

    tfile.Close()
    return 

##-------------------------------------------------------------------------------------
## 
def add_syst_trees(file_name, systematics=SYSTEMATICS, 
                   over_write=True, **kwargs):
    """
    Append systs to the ntuples, and then copy the nominal tree 
    with a different syst branch for the systematics.
    """
    tfile = ROOT.TFile.Open(file_name, "UPDATE")

    # add syst trees
    for sys in systematics:
        sysName, varName, varForm = sys[0], sys[1], sys[2]
        log.info("---- Adding %s SYST tree ----"%sysName)
        if sysName in [k.GetName() for k in tfile.GetListOfKeys()]:
            log.warning("%s SYST tree already exists in %s"%(sysName, file_name))
            if over_write:
                log.warning('over-writing existing tree')
                ROOT.gDirectory.Delete(sysName)
                tfile.Close()
                tfile = ROOT.TFile.Open(file_name, "UPDATE")
            else:
                continue

        nom_tree = tfile.NOMINAL
        syst_tree = nom_tree.CloneTree(0)
        syst_tree.SetName(sysName)
        syst_tree.SetTitle(sysName)

        # append branch with syst variation to syst tree
        form = ROOT.TTreeFormula(varName, varForm, nom_tree)
        form.SetQuickLoad(True)
        val = array.array('f', [0.])
        new_branch = syst_tree.Branch(varName, val, varName+"/F")

        nom_tree.SetCacheSize(32*2**20)
        nom_tree.SetCacheLearnEntries()
        totalEntries = nom_tree.GetEntries()
        blockSize = 2**16
        blocks = totalEntries/blockSize
        for block in xrange(blocks+1):
            for entry in xrange(block*blockSize,
                                min(totalEntries, (block+1)*blockSize)):
                if (entry%10000==0):
                    log.info("------->>>>------: {0}/{1}".format(entry+1, totalEntries))
                nom_tree.GetEntry(entry)
                val[0] = form.EvalInstance()
                new_branch.Fill()
                syst_tree.Fill()
        syst_tree.Write(sysName, ROOT.TObject.kOverwrite)
        
    tfile.Close()
    return 


##-------------------------------------------------------------------------------------
## 
def skim_tree(file_name, selections=SELECTIONS, **kwargs):
    """
    skim tree based on some selections.
    """
    tfile = ROOT.TFile.Open(file_name, "UPDATE")
    trees = get_trees(tfile)
    for tree in trees:
        # - - - - set the selections here
        selections = setup_tformulas(tree, selections)
        
        ctree = tree.CloneTree(0)
        entries = tree.GetEntries()
        for i, event in enumerate(tree):
            if i%10000==0:
                log.info("---- %i/%i ----"%(i+1, entries))

            keep = True
            for selection in selections:
                keep &= (selection.EvalInstance()==1)
                    
            if keep:
                ctree.Fill()
        ctree.Write(tree.GetName(), ROOT.TObject.kOverwrite)

    tfile.Close()
    
    return

##-------------------------------------------------------------------------------------
## 
def compress_file(file_name, copy_input=False, merge_metadata=False, suffix=".cmp", overwrite=False, outdir="",
    out_keys=["NOMINAL", "h_metadata", "h_metadata_theory_weights", "h_metadata_htxs_weights", "EventLoop_FileExecuted", "EventLoop_JobStats"], **kwargs):
    """
    """
    # if ipath:
    #     print "Opening input file: %s" %(ipath)
    #     ifile = ROOT.TFile(file_name, "READ")
    # else:
    # print copy_input
    # print outdir
    # print file_name
    # print file_name.split("/")
    ofile_name = outdir+file_name.split("/")[-2]+"/"+file_name.split("/")[-1]+suffix
    # print ofile_name
    # ofile_name = file_name+suffix
    if os.path.isfile(ofile_name) and not overwrite:
        log.warning("%s already exists, set overwrite=True if you want to overwrite it"%ofile_name)
        return
    else:
        log.info("Creating output directory")
        os.system("mkdir -p %s" %(file_name.split("/")[-2]))
        log.info("Opening input file: %s" %(file_name))
        ifile = ROOT.TFile(file_name, "READ")

        log.info("Creating output file: %s" %(ofile_name))
        ofile = ROOT.TFile(ofile_name, "RECREATE") 

        keys = ifile.GetListOfKeys()
        keys = filter(lambda k: k.GetName() in out_keys, keys)
        for key in keys:
            log.info("Writing %s to %s"%(key.GetName(), ofile_name))
            tobject = key.ReadObj()
            if isinstance(tobject, ROOT.TTree):
                tobject.SetAutoFlush(0)
                cobject = tobject.CloneTree()
            else:
                cobject = tobject.Clone()
            cobject.Write()

        ofile.Close()
        ifile.Close()

    return 

##----------------------------------------------------------------------------------------
##
def merge_tfiles(idir, **kwargs):
    ifiles = glob.glob("%s/*.root*"%idir)
    ds_name = idir.split("/")[-1]
    outname = "%s/%s.MERGED.root"%(idir, ds_name)

    hargs = " ".join(ifiles)
    os.system("hadd %s %s"%(outname, hargs))


#----------------------------------------------------------------------------------------
## simple class for parallel processing
#----------------------------------------------------------------------------------------
class Job(Process):
    """
    simpel worker class for parallel
    processing. the run method is necessary,
    which will overload the run method of Procces.
    """
    
    def __init__(self, workfunc, ipath, **workfunc_args):
        super(Job, self).__init__()
        self.workfunc = workfunc
        self.ipath = os.path.abspath(ipath)
        self.workfunc_args = workfunc_args
        self.copy_input = workfunc_args.pop('copy_input', True)
        self.outdir = workfunc_args.pop("outdir", None)
        
    def run(self):
        """
        overwrite the base class method.
        """
        
        # copy to new file
        if self.copy_input:    
            opath = "%s.%s"%(self.ipath, args.suffix)
            # - - - - if out dir is provided copy files to it
            if self.outdir:
                reldir, oname = opath.split("/")[-2:]
                
                # - - only keep the structure of original ntuples
                if reldir.startswith("user."):
                    self.outdir = os.path.join(self.outdir, reldir)
                    # print self.outdir 
                    if not os.path.isdir(self.outdir):
                        # os.mkdir(self.outdir)
                        os.system("mkdir -p %s"%self.outdir)
                opath = os.path.join(self.outdir, oname)
            if os.path.exists(opath):
                log.warning(" {} already exists (will skip copying if file is in good shape)" .format(opath))
                tf = ROOT.TFile.Open(opath, 'READ')
                if not tf:
                    log.warning("{} exists but it ZOMBIE, replacing it".format(opath))
                    os.remove(opath)
                    shutil.copy(self.ipath, opath)
            else:
                log.info("copying {0} to {1} ...".format(self.ipath, opath))
                shutil.copy(self.ipath, opath)
        else:
            # if self.outdir:
            #     # opath = self.outdir
            #     opath = "%s.%s"%(self.ipath, args.suffix)
            #     print "opath:%s " %opath
            #     reldir, oname = opath.split("/")[-2:]

            #     print "reldir: %s, oname: %s" %(reldir, oname)
                
            # #     # - - only keep the structure of original ntuples
            #     if reldir.startswith("user."):
            #         self.outdir = os.path.join(self.outdir, reldir)
            #         print "outdir: %s" %self.outdir 
            #         if not os.path.isdir(self.outdir):
            #             # os.mkdir(self.outdir)
            #             os.system("mkdir -p %s"%self.outdir)
            #     opath = os.path.join(self.outdir, oname)
            #     print "opath: %s" %opath
            # print self.outdir
            opath = self.ipath
        
        # - - - - the actual work happens here
        self.workfunc(opath, **self.workfunc_args)
        
        return 

#------------------------------------------------------------------------------    
if __name__=='__main__':
    
    # - - - - whats's the ipath for workfunc
    if not args.files:
        raise IOError('input files plz?')
    dfiles = args.files

    # - - - - setup the workers args 

    workfunc_args = dict()
    
    workfunc_args['copy_input']  = True
    if args.update_in_place:
        workfunc_args['copy_input']  = False

    if args.outdir:
        workfunc_args["outdir"] = args.outdir
        
    if args.action=='rm':
        workfunc = remove_branches
        workfunc_args['branches'] = RM_BRANCHES
        
    elif args.action=='ab':
        workfunc = add_branches
        workfunc_args['branches'] = ADD_BRANCHES
        
    elif args.action=='at':
        workfunc = add_syst_trees
        workfunc_args['systematics'] = SYSTEMATICS

    elif args.action=='skim':
        workfunc = skim_tree
    
    elif args.action=="mtf":
        workfunc = merge_tfiles

    elif args.action=="zip":
        workfunc_args['copy_input'] = False
        # workfunc_args['outdir'] = args.outdir
        # print "IN ARG CHECKER: %s" %(workfunc_args)
        workfunc = compress_file        
        
    else:
        raise Exception(" requested--- %s --- action is not supported"%args.action)
    
    # - - - - - - - - sort files based on size to start the heavier ones sooner.
    dfiles.sort(key=lambda f: os.path.getsize(f), reverse=True)
    jobs = [Job(workfunc, f, **workfunc_args) for f in dfiles]
    
    # - - - - - - - - run jobs
    run_pool(jobs, n_jobs=-1)
