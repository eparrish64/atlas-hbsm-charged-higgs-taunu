#! /usr/bin/env python 

""" Script for validating different classifier inputs
"""
## stdlib 
import os, time

## - -  parse ana args (needed before ROOT)
from hpana.cmd import get_clf_parser 
clf_parser = get_clf_parser()
CLF_ARGS = clf_parser.parse_args()

## local
from hpana.config import Configuration
from hpana.analysis import Analysis
from hpana.mva.classifier import SClassifier
from hpana.mva import N_TRACKS, FOLD_CUT_STR, TRAINING_MASS_BINS, BRANCHES, ALL_FEATS
from hpana.mva.input_validation import plot_sig_dist, plot_weights, features_ranking, features_correlation 

## - - set log level
from hpana import log
log.setLevel(CLF_ARGS.log)


# - - speed things up a bit
import ROOT
ROOT.SetSignalPolicy(ROOT.kSignalFast)
ROOT.gROOT.SetBatch(True)
log.info("ROOT is in batch mode")

##-------------------------------------------------------------
## consts 
##-------------------------------------------------------------
## - - build analysis main configuration object
CONFIG = Configuration(CLF_ARGS.channel)

## - - instantiate Analysis
ANALYSIS  = Analysis(CONFIG, compile_cxx=True)

## - - training samples (no need for l-->tau fakes or MC j--> tau fakes for masses < 500GeV)
BKGS = filter(lambda b: not b.name in ["LepFakes"], ANALYSIS.backgrounds)
if CLF_ARGS.bkg:
    BKGS = filter(lambda b: b.name in CLF_ARGS.bkg, BKGS)

SIGS = ANALYSIS.get_signals()
if CLF_ARGS.sig:
    SIGS = filter(lambda s: s.name in CLF_ARGS.sig, SIGS)

## different set of bkgs for different signals regions 
TRAINING_BKGS = { 
    "LOW": filter(lambda b: not b.name in ["QCD"] , BKGS),
    "HIGH":  BKGS[:], #<! above 500 GeV
}  

## - - setup outdir
os.system("mkdir -p %s"%CLF_ARGS.outdir)

##-------------------------------------------------------------
## main driver 
##-------------------------------------------------------------
if __name__=="__main__":
    ##  prepare training Dataframe
    DFRAME = SClassifier.prepare_data(BKGS, SIGS, ALL_FEATS[CLF_ARGS.channel], data_lumi=CONFIG.data_lumi,
                                      channel=CLF_ARGS.channel, branches=BRANCHES[CLF_ARGS.channel], train_data=CLF_ARGS.train_data)

    ## if CLF_ARGS.plt_evts_dist:
    plot_sig_dist(DFRAME, signals=SIGS, outdir=CLF_ARGS.outdir)

    ## if CLF_ARGS.plot_weights:
    plot_weights(DFRAME, outdir=CLF_ARGS.outdir) 


    ## correlation matrix ?
    if CLF_ARGS.plot_correlations :
        p_title = r"Correlation Matrix: $ %i \leq m_{H^+} \leq %i [GeV]$"%(signal_masses[0], signal_masses[-1])
        features_correlation(X_train, CLF_FEATURES[CLF_ARGS.channel], outname=clf_name.replace(".pkl", ""), outdir=CLF_ARGS.outdir, title=p_title)

    