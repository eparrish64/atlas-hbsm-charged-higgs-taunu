#!/usr/bin/env python
"""
Update the datasets database
"""
from argparse import ArgumentParser
import yaml

##-----------------------------------------------------------------------
## setup cmd args
parser = ArgumentParser()
parser.add_argument('--deep', action='store_true', default=False)
parser.add_argument('--reset', action='store_true', default=False)
parser.add_argument('--versioned', action='store_true', default=False)
parser.add_argument('--validate', action='store_true', default=False)
parser.add_argument('--validate-pattern', default=None)
parser.add_argument('--validate-type', default=None)
parser.add_argument('--validate-year', type=int, default=None)
parser.add_argument('--info', action='store_true', default=False)
parser.add_argument('--name', default='datasets')
parser.add_argument('--config', default='hpana/db/datasets_config.yml')
parser.add_argument('-v', '--verbose', action='store_true', default=False)
parser.add_argument('--version', type=str)
parser.add_argument('analysis', choices=("taujet", "taulep"))
args = parser.parse_args()


## ROOT stuff after cmd setup 
from hpana.db.datasets import Database


# - - - - - - - - create a database 
db = Database(name="%s_%s%s"%(args.name, args.analysis, args.version),
              verbose=args.verbose)

# - - - - - - - - validate the database 
if args.validate or args.validate_pattern is not None:
    # check for missing events etc...
    validate_type = args.validate_type
    if validate_type is not None:
        validate_type = args.validate_type.upper()
        validate_type = eval(validate_type)
    db.validate(pattern=args.validate_pattern,
                datatype=validate_type,
                year=args.validate_year)

# - - - - - - - - just print db 
elif args.info:
    print "%i datasets in database" % len(db)
    for name in sorted(db.keys()):
        print db[name]
        if len(db[name].files) == 0:
            print "EMPTY DATASET"
            sys.exit(1)
                    
# - - - - - - - - updated the datebase                     
else:
    if args.reset:
        db.clear()
    with open(args.config) as config:
        config_dict = yaml.load(config)
        for year, year_config in config_dict.items():
            if args.analysis not in year_config:
                log.warning("no config found for %s"%args.analysis)
                continue
            # - - - - pass the configs to the db
            params = {}
            params['data_grl'] = year_config['common'].get('grl', None)
            params.update(year_config[args.analysis])
            db.scan(year,
                    deep=args.deep,
                    versioned=args.versioned,
                    **params)
    db.write()
